-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/tbidne/sudoku#readme</a>
@package sudoku
@version 0.1.0.0


-- | Contains the data declarations for Sudoku Grid and Cell
module Domain

-- | Represents a Sudoku Grid.
--   
--   <a>Int</a> <tt>gridId</tt>: id for the grid.
--   
--   <ul>
--   <li><i><a>Cell</a></i> <tt>cells</tt>: list of all cells for the
--   grid.</li>
--   </ul>
--   
--   <a>Bool</a> <tt>solved</tt>: indicates if this grid has been solved.
data Grid
Grid :: Int -> [Cell] -> Bool -> Grid
[gridId] :: Grid -> Int
[cells] :: Grid -> [Cell]
[solved] :: Grid -> Bool

-- | Represents a Sudoku Cell.
--   
--   <a>Int</a> <tt>cellId</tt>: cell's id.
--   
--   <a>Int</a> <tt>row</tt>: cell's row.
--   
--   <a>Int</a> <tt>col</tt>: cell's column.
--   
--   <a>Int</a> <tt>realValue</tt>: cell's real value if it's been solved,
--   otherwise -1 (DB) or 0 (UI).
--   
--   <a>Int</a> <tt>userValue</tt>: cell's user provided value, otherwise
--   -1.
--   
--   <a>Bool</a> <tt>revealed</tt>: indicates if this grid has been
--   revealed.
data Cell
Cell :: Int -> Int -> Int -> Int -> Int -> Bool -> Cell
[cellId] :: Cell -> Int
[row] :: Cell -> Int
[col] :: Cell -> Int
[realValue] :: Cell -> Int
[userValue] :: Cell -> Int
[revealed] :: Cell -> Bool
instance GHC.Generics.Generic Domain.Grid
instance GHC.Show.Show Domain.Grid
instance GHC.Classes.Eq Domain.Grid
instance GHC.Generics.Generic Domain.Cell
instance GHC.Show.Show Domain.Cell
instance GHC.Classes.Eq Domain.Cell
instance Data.Aeson.Types.ToJSON.ToJSON Domain.Grid
instance Data.Aeson.Types.FromJSON.FromJSON Domain.Grid
instance Data.Aeson.Types.ToJSON.ToJSON Domain.Cell
instance Data.Aeson.Types.FromJSON.FromJSON Domain.Cell


-- | Interfaces with the database.
module Database

-- | Returns <a>IO</a> [<a>GridT</a>] by parameter id.
getGridById :: Connection -> Integer -> IO [GridT]

-- | Saves grid by id.
saveGrid :: Connection -> Integer -> Grid -> IO Int64

-- | Saves cell by id.
saveCell :: Connection -> Integer -> Cell -> IO Int64

-- | Returns <a>IO</a> [<a>CellT</a>] by <tt>gridId</tt>.
getCellsByGridId :: Connection -> Integer -> IO [CellT]

-- | Saves all cells.
saveCells :: Connection -> [Cell] -> IO Int64

-- | Database type for Sudoku Grid.
--   
--   <a>Int</a> <tt>gridId</tt>: id for the grid.
--   
--   <a>Bool</a> <tt>solved</tt>: indicates if this grid has been solved.
data GridT
GridT :: Int -> Bool -> GridT
[gridId] :: GridT -> Int
[solved] :: GridT -> Bool

-- | Database type for Sudoku Cell.
--   
--   <a>Int</a> <tt>cellId</tt>: cell's id.
--   
--   <a>Int</a> <tt>parentGridId</tt>: cell's parent id.
--   
--   <a>Int</a> <tt>row</tt>: cell's row.
--   
--   <a>Int</a> <tt>col</tt>: cell's column.
--   
--   <a>Maybe</a> <a>Int</a> <tt>realValue</tt>: <a>Just</a> <a>Int</a> if
--   it's been solved, otherwise <a>Nothing</a>.
--   
--   <a>Maybe</a> <a>Int</a> <tt>userValue</tt>: <a>Just</a> <a>Int</a> if
--   user provided value, otherwise <a>Nothing</a>.
--   
--   <a>Bool</a> <tt>revealed</tt>: indicates if this grid has been
--   revealed.
data CellT
CellT :: Int -> Int -> Int -> Int -> Maybe Int -> Maybe Int -> Bool -> CellT
[cellId] :: CellT -> Int
[parentGridId] :: CellT -> Int
[row] :: CellT -> Int
[col] :: CellT -> Int
[realValue] :: CellT -> Maybe Int
[userValue] :: CellT -> Maybe Int
[revealed] :: CellT -> Bool
instance GHC.Generics.Generic Database.CellT
instance GHC.Show.Show Database.CellT
instance GHC.Classes.Eq Database.CellT
instance GHC.Generics.Generic Database.GridT
instance GHC.Show.Show Database.GridT
instance GHC.Classes.Eq Database.GridT
instance Database.PostgreSQL.Simple.FromRow.FromRow Database.CellT
instance Database.PostgreSQL.Simple.FromRow.FromRow Database.GridT


-- | Contains the REST API for Sudoku.
module API

-- | <b>GET</b>: <tt>/health</tt>. Returns <a>JSON</a>.
--   
--   <b>GET</b>: <tt>/grid/&lt;id&gt;</tt>. Returns <a>JSON</a> <a>Grid</a>
--   for the given <tt>id</tt>.
--   
--   <b>PUT</b>: <tt>/grid/&lt;id&gt;</tt>. For given <a>JSON</a>
--   <a>ReqBody</a> <a>Grid</a> with <tt>id</tt>, saves the grid and
--   returns JSON <tt>Int64</tt> representing number of saved cells + saved
--   grid.
--   
--   <b>PUT</b>: <tt>/grid/&lt;id&gt;/solve</tt>, For given JSON ReqBody
--   <a>Grid</a> with <tt>id</tt>, solves and returns the grid.
--   
--   <b>PUT</b>: <tt>/cell/&lt;id&gt;/reveal</tt>, For given JSON ReqBody
--   <a>Cell</a> with <tt>id</tt>, reveals the cell.
--   
--   <b>PUT</b>: <tt>/grid/&lt;id&gt;/reveal</tt>, For given JSON ReqBody
--   <a>Grid</a> with <tt>id</tt>, reveals the grid.
--   
--   <b>PUT</b>: <tt>/grid/&lt;id&gt;/clear</tt>, For given gridId
--   <tt>id</tt>, clears the grid.
type SudokuApi = "health" :> Get '[JSON] String :<|> "grid" :> Capture "gridId" Integer :> Get '[JSON] Grid :<|> "grid" :> Capture "gridId" Integer :> ReqBody '[JSON] Grid :> Put '[JSON] Int64 :<|> "grid" :> Capture "gridId" Integer :> "solve" :> ReqBody '[JSON] Grid :> Put '[JSON] Grid :<|> "cell" :> Capture "cellId" Integer :> "reveal" :> ReqBody '[JSON] Cell :> Put '[JSON] Cell :<|> "grid" :> Capture "gridId" Integer :> "reveal" :> ReqBody '[JSON] Grid :> Put '[JSON] Grid :<|> "grid" :> Capture "gridId" Integer :> "clear" :> Put '[JSON] Grid

-- | Returns <a>SudokuApi</a> behind <a>Proxy</a>.
sudokuApi :: Proxy SudokuApi


-- | Contains internal functions for Sudoku.
module Service.Internal

-- | Returns a blank <a>Grid</a>
blankGrid :: Grid

-- | For a [<a>GridT</a>] of size 1, and <a>Just</a> [<a>Cell</a>], returns
--   <a>Just</a> <a>Grid</a>. Otherwise returns <a>Nothing</a>.
gridTToGrid :: [GridT] -> Maybe [Cell] -> Maybe Grid

-- | For a [<a>CellT</a>], returns <a>Just</a> [<a>Cell</a>]. Otherwise
--   returns <a>Nothing</a>.
cellTToCell :: [CellT] -> Maybe [Cell]

-- | If <a>Grid</a> <tt>g</tt> can be solved returns <a>Just</a>
--   <tt>g'</tt>, where <tt>g'</tt> is solved. Otherwise returns
--   <a>Nothing</a>.
solve :: Grid -> Maybe Grid

-- | For a <tt>grid</tt> and <tt>cell</tt>, returns a list of grids where
--   each new grid is all possible guesses for <tt>cell</tt>.
allGuessesForCell :: Grid -> Cell -> [Grid]

-- | Returns an empty cell, if any exists.
getEmptyCell :: [Cell] -> Maybe Cell

-- | Returns a solved grid, if any exists.
getSolvedGrid :: [Maybe Grid] -> Maybe Grid

-- | Returns <a>True</a> if the <a>Grid</a> is valid by the rules of
--   Sudoku, <a>False</a> otherwise.
validate :: Grid -> Bool

-- | For a <a>Cell</a> <tt>section</tt> (i.e., row, column, or box),
--   returns <a>True</a> if the section is valid, <a>False</a> otherwise.
--   
--   Works by filtering the [<a>Cell</a>] into [[<a>Cell</a>]] where each
--   list contains the list of all cells with <tt>realValue</tt>
--   &lt;math&gt;. After that we test that each list has length <tt>&lt;
--   2</tt>.
validateSection :: [Cell] -> Bool

-- | Marks a cell as revealed.
revealCell :: Cell -> Cell

-- | Marks a grid as revealed.
revealGrid :: Grid -> Grid

-- | Marks a grid as solved.
markGridSolved :: Grid -> Grid

-- | Marks correct cells as revealed.
markCorrectCellsRevealed :: [Cell] -> [Cell]

-- | Marks all cells as revealed.
revealAllCells :: [Cell] -> [Cell]


-- | Contains the main web server functions.
module Service

-- | Simple health check. Returns a <a>Handler</a> "Sudoku is up!"
health :: Handler String

-- | For a <a>Connection</a> and <a>Integer</a> <tt>gridId</tt>, returns a
--   <a>Handler</a> <a>Grid</a>. Throws 500 if an error is encountered.
getGridById :: Connection -> Integer -> Handler Grid

-- | For a <a>Connection</a>, <a>Integer</a> <tt>gridId</tt>, and
--   <a>Grid</a>, saves the grid and returns the total saved objects (Grid
--   + cells).
saveGrid :: Connection -> Integer -> Grid -> Handler Int64

-- | For a <a>Connection</a>, <a>Integer</a> <tt>gridId</tt>, and
--   <a>Grid</a>, attempts to solve the grid. If the grid cannot be solved
--   an erro message is printed to the console and 500 is thrown.
solveGrid :: Connection -> Integer -> Grid -> Handler Grid

-- | For a <a>Connection</a>, <a>Integer</a> <tt>cellId</tt>, and
--   <a>Cell</a>, reveals a cell.
revealCell :: Connection -> Integer -> Cell -> Handler Cell

-- | For a <a>Connection</a>, <a>Integer</a> <tt>gridId</tt>, and
--   <a>Grid</a>, reveals the grid.
revealGrid :: Connection -> Integer -> Grid -> Handler Grid

-- | For a <a>Connection</a>, <a>Integer</a> <tt>gridId</tt>, and
--   <a>Grid</a>, clears the grid.
clearGrid :: Connection -> Integer -> Handler Grid


-- | Entry point for web server
module Server

-- | Runs the server.
run :: IO ()
